package com.fragile.infosafe.tests.controller;
// Generated by CodiumAI

import com.fragile.infosafe.primary.auth.AuthenticationRequest;
import com.fragile.infosafe.primary.auth.AuthenticationResponse;
import com.fragile.infosafe.primary.auth.AuthenticationService;
import com.fragile.infosafe.primary.config.JwtService;
import com.fragile.infosafe.primary.controller.UserController;
import com.fragile.infosafe.primary.model.User;
import com.fragile.infosafe.primary.requests.RegisterRequest;
import com.fragile.infosafe.primary.service.EmailService;
import com.fragile.infosafe.primary.service.UserService;
import org.junit.Test;
import org.mockito.Mockito;
import org.springframework.http.ResponseEntity;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import static org.junit.Assert.*;

public class UserControllerTest {


    // Get all users
    @Test
    public void test_getAllUsers() {
        // Mock UserService
        UserService userService = Mockito.mock(UserService.class);
    
        // Create UserController instance with mocked dependencies
        UserController userController = new UserController(userService, null, null, null, null, null, null, null);
    
        // Create a list of users to be returned by the mocked UserService
        List<User> users = new ArrayList<>();
        users.add(new User());
        users.add(new User());
    
        // Mock the getAllUsers() method of UserService to return the list of users
        Mockito.when(userService.getAllUsers()).thenReturn(users);
    
        // Call the userlist() method of UserController
        List<User> result = userController.userlist();
    
        // Assert that the returned list of users is equal to the expected list of users
        assertEquals(users, result);
    }

    // Get user by id
    @Test
    public void test_getUserById() {
        // Mock UserService
        UserService userService = Mockito.mock(UserService.class);
    
        // Create UserController instance with mocked dependencies
        UserController userController = new UserController(userService, null, null, null, null, null, null, null);
    
        // Create a user to be returned by the mocked UserService
        User user = new User();
    
        // Mock the getUser() method of UserService to return the user
        Mockito.when(userService.getUser(Mockito.anyInt())).thenReturn(Optional.of(user));
    
        // Call the getUser() method of UserController
        Optional<User> result = userController.getUser(1, new User());
    
        // Assert that the returned user is equal to the expected user
        assertEquals(Optional.of(user), result);
    }

    // Register a new user
    @Test
    public void test_registerUser() {
        // Mock EmailService
        EmailService emailService = Mockito.mock(EmailService.class);
    
        // Mock AuthenticationService
        AuthenticationService authService = Mockito.mock(AuthenticationService.class);
    
        // Create UserController instance with mocked dependencies
        UserController userController = new UserController(null, authService, emailService, null, null, null, null, null);
    
        // Create a RegisterRequest object
        RegisterRequest request = new RegisterRequest();
    
        // Mock the register() method of AuthenticationService to return an AuthenticationResponse
        AuthenticationResponse response = new AuthenticationResponse();
        Mockito.when(authService.register(request)).thenReturn(response);
    
        // Call the register() method of UserController
        ResponseEntity<AuthenticationResponse> result = userController.register(request);
    
        // Assert that the returned ResponseEntity is equal to the expected ResponseEntity
        assertEquals(ResponseEntity.ok(response), result);
    }

    // User id does not exist
    @Test
    public void test_getUserByIdNonExistentId() {
        // Mock UserService
        UserService userService = Mockito.mock(UserService.class);
    
        // Create UserController instance with mocked dependencies
        UserController userController = new UserController(userService, null, null, null, null, null, null, null);
    
        // Mock the getUser() method of UserService to return an empty Optional
        Mockito.when(userService.getUser(Mockito.anyInt())).thenReturn(Optional.empty());
    
        // Call the getUser() method of UserController
        Optional<User> result = userController.getUser(1, new User());
    
        // Assert that the returned Optional is empty
        assertFalse(result.isPresent());
    }

    // Invalid token
    @Test
    public void test_validTokenInvalidToken() {
        // Mock JwtService
        JwtService jwtService = Mockito.mock(JwtService.class);
    
        // Create UserController instance with mocked dependencies
        UserController userController = new UserController(null, null, null, null, null, null, null, jwtService);
    
        // Mock the isTokenValid() method of JwtService to return false
        Mockito.when(jwtService.isTokenValid(Mockito.anyString(), Mockito.any(User.class))).thenReturn(false);
    
        // Create an AuthenticationRequest object
        AuthenticationRequest request = new AuthenticationRequest();
    
        // Call the validToken() method of UserController
        ResponseEntity<Boolean> result = userController.validToken(request);
    
        // Assert that the returned ResponseEntity contains false
        assertEquals(ResponseEntity.ok(false), result);
    }

    // User email does not exist
    @Test
    public void test_checkEmailExistsNonExistentEmail() {
        // Mock UserService
        UserService userService = Mockito.mock(UserService.class);
    
        // Create UserController instance with mocked dependencies
        UserController userController = new UserController(userService, null, null, null, null, null, null, null);
    
        // Mock the checkEmailExists() method of UserService to return false
        Mockito.when(userService.checkEmailExists(Mockito.anyString())).thenReturn(false);
    
        // Call the checkEmailExists() method of UserController
        ResponseEntity<Boolean> result = userController.checkEmailExists("test@example.com");
    
        // Assert that the returned ResponseEntity contains false
        assertEquals(ResponseEntity.ok(false), result);
    }

}