package com.fragile.infosafe.tests.controller;
// Generated by CodiumAI

import com.fragile.infosafe.primary.controller.RandomPasswordController;
import com.fragile.infosafe.primary.service.PasswordEncryption;
import com.fragile.infosafe.primary.service.RandomPasswordGenerator;
import org.junit.Test;
import org.mockito.Mockito;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.io.UnsupportedEncodingException;
import java.security.GeneralSecurityException;
import java.util.Map;

import static org.junit.Assert.*;

public class RandomPasswordControllerTest {

    // Generates a random password with at least one uppercase letter, one lowercase letter, one number, and one special character
    @Test
    public void test_generateRandomPassword_containsRequiredCharacters() throws GeneralSecurityException, UnsupportedEncodingException {
        // Create instance of RandomPasswordController
        RandomPasswordController randomPasswordController = new RandomPasswordController(new RandomPasswordGenerator());

        // Call the generate method
        ResponseEntity<Map<String, String>> responseEntity = randomPasswordController.generate();

        // Verify the response
        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());

        Map<String, String> response = responseEntity.getBody();
        assertNotNull(response);
        assertEquals(2, response.size());
        assertNotNull(response.get("message"));
        assertNotNull(response.get("password"));

        String generatedPassword = response.get("password");
        assertTrue(generatedPassword.matches(".*[A-Z].*"));
        assertTrue(generatedPassword.matches(".*[a-z].*"));
        assertTrue(generatedPassword.matches(".*\\d.*"));
        assertTrue(generatedPassword.matches(".*[=+-?@#$%^&*!_<>|].*"));
    }

}