package com.fragile.infosafe.tests.controller;
// Generated by CodiumAI

import com.fragile.infosafe.primary.controller.AssetController;
import com.fragile.infosafe.primary.model.Asset;
import com.fragile.infosafe.primary.requests.AssetRequest;
import com.fragile.infosafe.primary.service.AssetService;
import com.fragile.infosafe.primary.service.DeleteService;
import org.junit.Test;
import org.mockito.Mockito;
import org.springframework.http.ResponseEntity;

import static org.junit.Assert.*;

public class AssetControllerTest {

    // Updating an existing asset
    @Test
    public void test_update_existing_asset() {
        // Create a mock AssetService
        AssetService mockService = Mockito.mock(AssetService.class);
    
        // Create a mock DeleteService
        DeleteService mockDeleteService = Mockito.mock(DeleteService.class);
    
        // Create an instance of AssetController with the mock services
        AssetController controller = new AssetController(mockService, mockDeleteService);
    
        // Create a mock AssetRequest
        AssetRequest mockAssetRequest = Mockito.mock(AssetRequest.class);
    
        // Create a mock Asset
        Asset mockAsset = Mockito.mock(Asset.class);
    
        // Set up the mock service to return the mock Asset when updateAsset() is called
        Mockito.when(mockService.updateAsset(mockAssetRequest)).thenReturn(mockAsset);
    
        // Call the updateAsset() method of the controller with the asset ID and mock AssetRequest
        Asset result = controller.updateAsset(1, mockAssetRequest);
    
        // Assert that the result is equal to the mock Asset
        assertEquals(mockAsset, result);
    }

    // Deleting an existing asset
    @Test
    public void test_delete_existing_asset() {
        // Create a mock AssetService
        AssetService mockService = Mockito.mock(AssetService.class);
    
        // Create a mock DeleteService
        DeleteService mockDeleteService = Mockito.mock(DeleteService.class);
    
        // Create an instance of AssetController with the mock services
        AssetController controller = new AssetController(mockService, mockDeleteService);
    
        // Call the deleteAssetAndSaveToSecondary() method of the controller with the asset ID
        controller.deleteAssetAndSaveToSecondary(1);
    
        // Verify that the deleteAssetAndSaveToSecondary() method of the mock DeleteService was called with the correct asset ID
        Mockito.verify(mockDeleteService).deleteAssetAndSaveToSecondary(1);
    }

    // Updating a non-existent asset
    @Test
    public void test_update_nonexistent_asset() {
        // Create a mock AssetService
        AssetService mockService = Mockito.mock(AssetService.class);
    
        // Create a mock DeleteService
        DeleteService mockDeleteService = Mockito.mock(DeleteService.class);
    
        // Create an instance of AssetController with the mock services
        AssetController controller = new AssetController(mockService, mockDeleteService);
    
        // Create a mock AssetRequest
        AssetRequest mockAssetRequest = Mockito.mock(AssetRequest.class);
    
        // Set up the mock service to return null when updateAsset() is called
        Mockito.when(mockService.updateAsset(mockAssetRequest)).thenReturn(null);
    
        // Call the updateAsset() method of the controller with the asset ID and mock AssetRequest
        Asset result = controller.updateAsset(1, mockAssetRequest);
    
        // Assert that the result is null
        assertNull(result);
    }

}