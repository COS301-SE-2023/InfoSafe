package com.fragile.infosafe.tests;
// Generated by CodiumAI

import com.fragile.infosafe.primary.model.Permission;
import org.junit.Test;
import static org.junit.Assert.*;

public class PermissionTest {


    // Verify that the getMask() method returns the correct mask for each permission.
    @Test
    public void test_getMask_returnsCorrectMask() {
        assertEquals(1, Permission.user_create.getMask());
        assertEquals(2, Permission.user_edit.getMask());
        assertEquals(4, Permission.user_delete.getMask());
        assertEquals(8, Permission.data_scope_create.getMask());
        assertEquals(16, Permission.data_scope_edit.getMask());
        assertEquals(32, Permission.data_scope_delete.getMask());
        assertEquals(64, Permission.access_requests_approve.getMask());
        assertEquals(128, Permission.access_requests_edit.getMask());
        assertEquals(256, Permission.tasks_create.getMask());
        assertEquals(512, Permission.tasks_edit.getMask());
        assertEquals(1024, Permission.tasks_delete.getMask());
        assertEquals(2048, Permission.tasks_approve.getMask());
        assertEquals(4096, Permission.devices_create.getMask());
        assertEquals(8192, Permission.devices_edit.getMask());
        assertEquals(16384, Permission.devices_delete.getMask());
        assertEquals(32768, Permission.support_requests_viewAll.getMask());
        assertEquals(65536, Permission.support_requests_edit.getMask());
        assertEquals(131072, Permission.support_requests_delete.getMask());
        assertEquals(262144, Permission.risks_create.getMask());
        assertEquals(524288, Permission.risks_edit.getMask());
        assertEquals(1048576, Permission.risks_review.getMask());
        assertEquals(2097152, Permission.risks_delete.getMask());
        assertEquals(4194304, Permission.request_asset.getMask());
        assertEquals(8388608, Permission.request_support.getMask());
        assertEquals(16777216, Permission.request_access.getMask());
        assertEquals(33554432, Permission.asset_request_review.getMask());
        assertEquals(67108864, Permission.role_creation.getMask());
    }

    // Verify that the enum values are not null.
    @Test
    public void test_enumValues_notNull() {
        assertNotNull(Permission.user_create);
        assertNotNull(Permission.user_edit);
        assertNotNull(Permission.user_delete);
        assertNotNull(Permission.data_scope_create);
        assertNotNull(Permission.data_scope_edit);
        assertNotNull(Permission.data_scope_delete);
        assertNotNull(Permission.access_requests_approve);
        assertNotNull(Permission.access_requests_edit);
        assertNotNull(Permission.tasks_create);
        assertNotNull(Permission.tasks_edit);
        assertNotNull(Permission.tasks_delete);
        assertNotNull(Permission.tasks_approve);
        assertNotNull(Permission.devices_create);
        assertNotNull(Permission.devices_edit);
        assertNotNull(Permission.devices_delete);
        assertNotNull(Permission.support_requests_viewAll);
        assertNotNull(Permission.support_requests_edit);
        assertNotNull(Permission.support_requests_delete);
        assertNotNull(Permission.risks_create);
        assertNotNull(Permission.risks_edit);
        assertNotNull(Permission.risks_review);
        assertNotNull(Permission.risks_delete);
        assertNotNull(Permission.request_asset);
        assertNotNull(Permission.request_support);
        assertNotNull(Permission.request_access);
        assertNotNull(Permission.asset_request_review);
        assertNotNull(Permission.role_creation);
    }

    // Verify that the enum values are unique.
    @Test
    public void test_enumValues_unique() {
        assertNotSame(Permission.user_create, Permission.user_edit);
        assertNotSame(Permission.user_create, Permission.user_delete);
        assertNotSame(Permission.user_edit, Permission.user_delete);
        assertNotSame(Permission.data_scope_create, Permission.data_scope_edit);
        assertNotSame(Permission.data_scope_create, Permission.data_scope_delete);
        assertNotSame(Permission.data_scope_edit, Permission.data_scope_delete);
        assertNotSame(Permission.access_requests_approve, Permission.access_requests_edit);
        assertNotSame(Permission.access_requests_approve, Permission.tasks_create);
        assertNotSame(Permission.access_requests_edit, Permission.tasks_create);
        assertNotSame(Permission.tasks_create, Permission.tasks_edit);
        assertNotSame(Permission.tasks_create, Permission.tasks_delete);
        assertNotSame(Permission.tasks_edit, Permission.tasks_delete);
        assertNotSame(Permission.tasks_approve, Permission.devices_create);
        assertNotSame(Permission.tasks_approve, Permission.devices_edit);
        assertNotSame(Permission.devices_create, Permission.devices_edit);
        assertNotSame(Permission.devices_create, Permission.devices_delete);
        assertNotSame(Permission.devices_edit, Permission.devices_delete);
        assertNotSame(Permission.support_requests_viewAll, Permission.support_requests_edit);
        assertNotSame(Permission.support_requests_viewAll, Permission.support_requests_delete);
        assertNotSame(Permission.support_requests_edit, Permission.support_requests_delete);
        assertNotSame(Permission.risks_create, Permission.risks_edit);
        assertNotSame(Permission.risks_create, Permission.risks_review);
        assertNotSame(Permission.risks_create, Permission.risks_delete);
        assertNotSame(Permission.risks_edit, Permission.risks_review);
        assertNotSame(Permission.risks_edit, Permission.risks_delete);
        assertNotSame(Permission.risks_review, Permission.risks_delete);
        assertNotSame(Permission.request_asset, Permission.request_support);
        assertNotSame(Permission.request_asset, Permission.request_access);
        assertNotSame(Permission.request_support, Permission.request_access);
        assertNotSame(Permission.asset_request_review, Permission.role_creation);
    }

    // Verify that the mask value for each permission is a power of 2.
    @Test
    public void test_maskValue_isPowerOfTwo() {
        assertTrue(isPowerOfTwo(Permission.user_create.getMask()));
        assertTrue(isPowerOfTwo(Permission.user_edit.getMask()));
        assertTrue(isPowerOfTwo(Permission.user_delete.getMask()));
        assertTrue(isPowerOfTwo(Permission.data_scope_create.getMask()));
        assertTrue(isPowerOfTwo(Permission.data_scope_edit.getMask()));
        assertTrue(isPowerOfTwo(Permission.data_scope_delete.getMask()));
        assertTrue(isPowerOfTwo(Permission.access_requests_approve.getMask()));
        assertTrue(isPowerOfTwo(Permission.access_requests_edit.getMask()));
        assertTrue(isPowerOfTwo(Permission.tasks_create.getMask()));
        assertTrue(isPowerOfTwo(Permission.tasks_edit.getMask()));
        assertTrue(isPowerOfTwo(Permission.tasks_delete.getMask()));
        assertTrue(isPowerOfTwo(Permission.tasks_approve.getMask()));
        assertTrue(isPowerOfTwo(Permission.devices_create.getMask()));
        assertTrue(isPowerOfTwo(Permission.devices_edit.getMask()));
        assertTrue(isPowerOfTwo(Permission.devices_delete.getMask()));
        assertTrue(isPowerOfTwo(Permission.support_requests_viewAll.getMask()));
        assertTrue(isPowerOfTwo(Permission.support_requests_edit.getMask()));
        assertTrue(isPowerOfTwo(Permission.support_requests_delete.getMask()));
        assertTrue(isPowerOfTwo(Permission.risks_create.getMask()));
        assertTrue(isPowerOfTwo(Permission.risks_edit.getMask()));
        assertTrue(isPowerOfTwo(Permission.risks_review.getMask()));
        assertTrue(isPowerOfTwo(Permission.risks_delete.getMask()));
        assertTrue(isPowerOfTwo(Permission.request_asset.getMask()));
        assertTrue(isPowerOfTwo(Permission.request_support.getMask()));
        assertTrue(isPowerOfTwo(Permission.request_access.getMask()));
        assertTrue(isPowerOfTwo(Permission.asset_request_review.getMask()));
        assertTrue(isPowerOfTwo(Permission.role_creation.getMask()));
    }

    private boolean isPowerOfTwo(int n) {
        return (n & (n - 1)) == 0;
    }

    // Verify that the mask value for each permission is not negative.
    @Test
    public void test_maskValue_notNegative() {
        assertTrue(Permission.user_create.getMask() >= 0);
        assertTrue(Permission.user_edit.getMask() >= 0);
        assertTrue(Permission.user_delete.getMask() >= 0);
        assertTrue(Permission.data_scope_create.getMask() >= 0);
        assertTrue(Permission.data_scope_edit.getMask() >= 0);
        assertTrue(Permission.data_scope_delete.getMask() >= 0);
        assertTrue(Permission.access_requests_approve.getMask() >= 0);
        assertTrue(Permission.access_requests_edit.getMask() >= 0);
        assertTrue(Permission.tasks_create.getMask() >= 0);
        assertTrue(Permission.tasks_edit.getMask() >= 0);
        assertTrue(Permission.tasks_delete.getMask() >= 0);
        assertTrue(Permission.tasks_approve.getMask() >= 0);
        assertTrue(Permission.devices_create.getMask() >= 0);
        assertTrue(Permission.devices_edit.getMask() >= 0);
        assertTrue(Permission.devices_delete.getMask() >= 0);
        assertTrue(Permission.support_requests_viewAll.getMask() >= 0);
        assertTrue(Permission.support_requests_edit.getMask() >= 0);
        assertTrue(Permission.support_requests_delete.getMask() >= 0);
        assertTrue(Permission.risks_create.getMask() >= 0);
        assertTrue(Permission.risks_edit.getMask() >= 0);
        assertTrue(Permission.risks_review.getMask() >= 0);
        assertTrue(Permission.risks_delete.getMask() >= 0);
        assertTrue(Permission.request_asset.getMask() >= 0);
        assertTrue(Permission.request_support.getMask() >= 0);
        assertTrue(Permission.request_access.getMask() >= 0);
        assertTrue(Permission.asset_request_review.getMask() >= 0);
        assertTrue(Permission.role_creation.getMask() >= 0);
    }

    // Verify that the mask value for each permission is not zero.
    @Test
    public void test_maskValue_notZero() {
        assertNotEquals(0, Permission.user_create.getMask());
        assertNotEquals(0, Permission.user_edit.getMask());
        assertNotEquals(0, Permission.user_delete.getMask());
        assertNotEquals(0, Permission.data_scope_create.getMask());
        assertNotEquals(0, Permission.data_scope_edit.getMask());
        assertNotEquals(0, Permission.data_scope_delete.getMask());
        assertNotEquals(0, Permission.access_requests_approve.getMask());
        assertNotEquals(0, Permission.access_requests_edit.getMask());
        assertNotEquals(0, Permission.tasks_create.getMask());
        assertNotEquals(0, Permission.tasks_edit.getMask());
        assertNotEquals(0, Permission.tasks_delete.getMask());
        assertNotEquals(0, Permission.tasks_approve.getMask());
        assertNotEquals(0, Permission.devices_create.getMask());
        assertNotEquals(0, Permission.devices_edit.getMask());
        assertNotEquals(0, Permission.devices_delete.getMask());
        assertNotEquals(0, Permission.support_requests_viewAll.getMask());
        assertNotEquals(0, Permission.support_requests_edit.getMask());
        assertNotEquals(0, Permission.support_requests_delete.getMask());
        assertNotEquals(0, Permission.risks_create.getMask());
        assertNotEquals(0, Permission.risks_edit.getMask());
        assertNotEquals(0, Permission.risks_review.getMask());
        assertNotEquals(0, Permission.risks_delete.getMask());
        assertNotEquals(0, Permission.request_asset.getMask());
        assertNotEquals(0, Permission.request_support.getMask());
        assertNotEquals(0, Permission.request_access.getMask());
        assertNotEquals(0, Permission.asset_request_review.getMask());
        assertNotEquals(0, Permission.role_creation.getMask());
    }

}