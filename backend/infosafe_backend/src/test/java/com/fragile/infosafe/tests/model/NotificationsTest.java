package com.fragile.infosafe.tests;
// Generated by CodiumAI

import com.fragile.infosafe.primary.model.Notifications;
import com.fragile.infosafe.primary.model.User;
import org.junit.Test;

import java.time.LocalDateTime;

import static org.junit.Assert.*;

public class NotificationsTest {


    // Create a notification with all fields filled
    @Test
    public void test_create_notification_with_all_fields_filled() {
        // Create a User object
        User user = User.builder()
                .user_id(1)
                .first_name("John")
                .last_name("Doe")
                .email("johndoe@example.com")
                .password("password")
                .build();

        // Create a Notification object with all fields filled
        Notifications notification = Notifications.builder()
                .notification_id(1)
                .createdAt(LocalDateTime.now())
                .notification("This is a notification")
                .timeMade("10:00 AM")
                .user(user)
                .build();

        // Assert that the notification object is not null
        assertNotNull(notification);
        // Assert that the notification_id is set correctly
        assertEquals(1, notification.getNotification_id());
        // Assert that the createdAt field is not null
        assertNotNull(notification.getCreatedAt());
        // Assert that the notification field is set correctly
        assertEquals("This is a notification", notification.getNotification());
        // Assert that the timeMade field is set correctly
        assertEquals("10:00 AM", notification.getTimeMade());
        // Assert that the user field is set correctly
        assertEquals(user, notification.getUser());
    }

    // Create a notification with only required fields filled
    @Test
    public void test_create_notification_with_required_fields_filled() {
        // Create a User object
        User user = User.builder()
                .user_id(1)
                .first_name("John")
                .last_name("Doe")
                .email("johndoe@example.com")
                .password("password")
                .build();

        // Create a Notification object with only required fields filled
        Notifications notification = Notifications.builder()
                .notification_id(1)
                .notification("This is a notification")
                .user(user)
                .build();

        // Assert that the notification object is not null
        assertNotNull(notification);
        // Assert that the notification_id is set correctly
        assertEquals(1, notification.getNotification_id());
        // Assert that the notification field is set correctly
        assertEquals("This is a notification", notification.getNotification());
        // Assert that the user field is set correctly
        assertEquals(user, notification.getUser());
    }


    // Create a notification with empty notification field


    // Create a notification with empty timeMade field


    // Create a notification with a future createdAt time
    @Test
    public void test_create_notification_with_future_createdAt_time() {
        // Create a User object
        User user = User.builder()
                .user_id(1)
                .first_name("John")
                .last_name("Doe")
                .email("johndoe@example.com")
                .password("password")
                .build();

        // Create a Notification object with a future createdAt time
        LocalDateTime futureTime = LocalDateTime.now().plusDays(1);
        Notifications notification = Notifications.builder()
                .notification_id(1)
                .createdAt(futureTime)
                .notification("This is a notification")
                .timeMade("10:00 AM")
                .user(user)
                .build();

        // Assert that the notification object is not null
        assertNotNull(notification);
        // Assert that the notification_id is set correctly
        assertEquals(1, notification.getNotification_id());
        // Assert that the createdAt field is set to the future time
        assertEquals(futureTime, notification.getCreatedAt());
        // Assert that the notification field is set correctly
        assertEquals("This is a notification", notification.getNotification());
        // Assert that the timeMade field is set correctly
        assertEquals("10:00 AM", notification.getTimeMade());
        // Assert that the user field is set correctly
        assertEquals(user, notification.getUser());
    }

}