package com.fragile.infosafe.tests.controller;
// Generated by CodiumAI

import com.fragile.infosafe.primary.controller.NotificationsController;
import com.fragile.infosafe.primary.model.Notifications;
import com.fragile.infosafe.primary.model.User;
import com.fragile.infosafe.primary.service.NotificationsService;
import org.junit.Test;
import org.mockito.Mockito;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import static org.junit.Assert.*;

public class NotificationsControllerTest {


    // Returns notifications for authenticated user
    @Test
    public void test_returns_notifications_for_authenticated_user() {
        // Mock authentication
        Authentication authentication = Mockito.mock(Authentication.class);
        SecurityContextHolder.getContext().setAuthentication(authentication);

        // Mock authenticated user
        User authenticatedUser = Mockito.mock(User.class);
        Mockito.when(authentication.getPrincipal()).thenReturn(authenticatedUser);

        // Mock notifications service
        NotificationsService notificationsService = Mockito.mock(NotificationsService.class);
        List<Notifications> notifications = new ArrayList<>();
        Mockito.when(notificationsService.getNotifications(authenticatedUser)).thenReturn(notifications);

        // Create NotificationsController instance
        NotificationsController notificationsController = new NotificationsController(notificationsService);

        // Call getNotifications() method
        ResponseEntity responseEntity = notificationsController.getNotifications();

        // Assert that the response entity contains the notifications
        assertEquals(ResponseEntity.ok(notifications), responseEntity);
    }

    // Returns "No Notifications" if authenticated user has no notifications
    @Test
    public void test_returns_no_notifications_if_user_has_none() {
        // Mock authentication
        Authentication authentication = Mockito.mock(Authentication.class);
        SecurityContextHolder.getContext().setAuthentication(authentication);

        // Mock authenticated user
        User authenticatedUser = Mockito.mock(User.class);
        Mockito.when(authentication.getPrincipal()).thenReturn(authenticatedUser);

        // Mock notifications service
        NotificationsService notificationsService = Mockito.mock(NotificationsService.class);
        Mockito.when(notificationsService.getNotifications(authenticatedUser)).thenReturn(null);

        // Create NotificationsController instance
        NotificationsController notificationsController = new NotificationsController(notificationsService);

        // Call getNotifications() method
        ResponseEntity responseEntity = notificationsController.getNotifications();

        // Assert that the response entity contains "No Notifications"
        assertEquals(ResponseEntity.ok("No Notifications"), responseEntity);
    }

    // Returns 404 if authentication is null or principal is not a User
    @Test
    public void test_returns_404_if_authentication_is_null_or_principal_is_not_user() {
        // Mock authentication
        Authentication authentication = null;
        SecurityContextHolder.getContext().setAuthentication(authentication);

        // Mock notifications service
        NotificationsService notificationsService = Mockito.mock(NotificationsService.class);

        // Create NotificationsController instance
        NotificationsController notificationsController = new NotificationsController(notificationsService);

        // Call getNotifications() method
        ResponseEntity responseEntity = notificationsController.getNotifications();

        // Assert that the response entity is not found
        assertEquals(ResponseEntity.notFound().build(), responseEntity);
    }
}