package com.fragile.infosafe.tests;
// Generated by CodiumAI

import com.fragile.infosafe.primary.model.User;
import org.junit.Test;
import static org.junit.Assert.*;

public class UserTest {


    // User with valid data can be created
    @Test
    public void test_user_with_valid_data_can_be_created() {
        // Create a User object with valid data
        User user = User.builder()
                .first_name("John")
                .last_name("Doe")
                .email("john.doe@example.com")
                .password("password")
                .build();

        // Assert that the User object is not null
        assertNotNull(user);

        // Assert that the User object has the correct first name
        assertEquals("John", user.getFirst_name());

        // Assert that the User object has the correct last name
        assertEquals("Doe", user.getLast_name());

        // Assert that the User object has the correct email
        assertEquals("john.doe@example.com", user.getEmail());

        // Assert that the User object has the correct password
        assertEquals("password", user.getPassword());
    }

    // User can be updated with valid data
    @Test
    public void test_user_can_be_updated_with_valid_data() {
        // Create a User object with initial data
        User user = User.builder()
                .first_name("John")
                .last_name("Doe")
                .email("john.doe@example.com")
                .password("password")
                .build();

        // Update the User object with new data
        user.setFirst_name("Jane");
        user.setLast_name("Smith");
        user.setEmail("jane.smith@example.com");
        user.setPassword("newpassword");

        // Assert that the User object has been updated with the new data
        assertEquals("Jane", user.getFirst_name());
        assertEquals("Smith", user.getLast_name());
        assertEquals("jane.smith@example.com", user.getEmail());
        assertEquals("newpassword", user.getPassword());
    }

    // User can be deleted
    @Test
    public void test_user_can_be_deleted() {
        // Create a User object
        User user = User.builder()
                .first_name("John")
                .last_name("Doe")
                .email("john.doe@example.com")
                .password("password")
                .build();

        // Delete the User object
        user = null;

        // Assert that the User object has been deleted
        assertNull(user);
    }
}